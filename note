//2.1

*데이터 타입의 종류

1. Number
1) 정수(Integer) // 1, 2, 3, 4 ...
2) 소수(Float) // 1.555, 2.545345 ...
* Number타입은 서로 연산기호를 이용하여 계산할 수 있다.
2. String
: 처음부터 끝까지 문자(Text)로 구성되어 있다는 의미
"Hello," + " My name is Nico" // Hello, My name is Nico
* String타입은 ""을 이용하여 입력하고 String타입의 합은 두개를 합
쳐서 출력한다.

//2.2

# const → 변수 선언을 통해 코드를 간결하게
const a = 10;
const b = 2;
console.log(a + b);
console.log(a * b);
console.log(a / b);
# 길이가 긴 변수를 선언할 때 → Camelcase
ex. VeryLongVariableName
cf. Python에서는 very_long_variable_name

//2.3

변수만들때 let, const, var차이
let 재선언 금지, 재할당 가능
const 재선언 금지, 재할당 금지
var 재선언 가능, 재할당 가능
let a = b;
let a = c;
#재선언 금지
let a = b;
a = c;
#재할당은 가능
const a = b;
const a = c;
#재선언 금지
const a = b;
a = c;
#재할당 금지
var a = b;
var a = c;
a = d;
#재선언, 재할당 가능

//2.4

# booleans
1. true =/= "true"
2. false =/= "false"
3. null = 값이 없음
null =/= undefined
null =/= false
4. undefined = 값이 정의되지 않음

//2.5

데이터 정리하는 법 -->데이터 구조
데이터 구조중 가장 기본적인건 배열
선언 : const 배열명 = [1, 2, "hello", false, null, undefined]; 안에 뭐든 넣어도 됨
배열명[index 0부터];로 특정 순서의 값을 지정할 수 있음.
배열에 값을 추가 하는 법 --> 배열명.push(값);
이렇게 값을 추가하거나 변경할 수도 있음 --> 배열명[index] = 값;

//2.6

object는 property를 가진 데이터를 저장해주며, { } 를 사용한다.
const player = {
name : tomato,
color : red,
food : true,
};
console.log(player);
property를 불러오는 방법은 2가지가 있다.
1. console.log(player.name); => tomato
2. console.log(player["name"]); => tomato
또한 property를 바꾸는 것은 가능하지만 선언된 object를 바꾸는 것은 불가능하다.
ex)
const player = {
name : tomato,
color : red,
food : true,
};
console.log(player);
player.color = "blue";
console.log(player.color);
--> blue
그리고 property를 추가 할 수도 있다.
player.koreanName = "토마토";
--> {name: "tomato", color: "blue", food: true, koreaName: "토마토"}

//2.7
function은 계속 반복해서 사용할 수 있는 코드 조각이다.
function sayHello( ){
console.log("Hello!");
};
소괄호 안에 작성하는 것은 실행버튼을 누를 때마다 발생한다.
sayHello( ); 이렇게 쳐서 실행할 수 있다.
argument(인수)는 function을 실행하는 도안 정보를 function에게 보낼 수 있는 방법으로, 소괄호 안에 위치한다.

//2.8
인수를 받기 위해서 함수를 선언할 때 function 함수명(variable명) { } 를 작성한다.
function sayHello(nameOfPerson, age) {
console.log("Hello my name is " + nameOfPerson + " and I'm " + age);
}
sayHello("nico", 10);
sayHello("dal", 23);
이제 player.name();이런식으로 만드러보려면
const player = {
name: "nico",
sayHello: function(otherPersonsName) {
console.log("Hello " + otherPersonsName + " nice to meet you!");
},
};
player.sayHello("lynn");

//2.11
const calculator = {
add: function (a, b) {
console.log(a + b);
},
minus: function (a, b) {
console.log(a - b);
},
divide: function (a, b) {
console.log(a / b);
},
제곱: function (a, b) {
console.log(a ** b);
},
};
calculator.add(2, 3);
calculator.minus(5, 1);
calculator.divide(9, 2);
calculator.제곱(8, 3);

//2.13
prompt();라는 함수는 사용자에게 창을 띄어 값을 받음.
prompt();를 사용하면 답을 할때까지 코드의 실행을 멈추고, 매우 오래된 방법임. 별로 안이쁨. css로 바꾸지도 못함.
const age = prompt("how old are you?");
console.log(typeof age);
typeof라는 키워드를 쓰면 type를 볼 수 있는데, prompt();에서 숫자를 입력해도 string이라고 뜬다. string이 디폴트이기 때문이다.
한 type로 받아서 다른 type로 바꾸는 작업을 해야한다. "15"-->15
string-->number로 변환해주는 함수 parseInt();
console.log(typeof "15", typeof parseInt("15")); --> string number
이렇게 숫자로 변환이 되야 비교를 할 수 있다.
참고로 "숫자"가 아닌게 입력되면 변환이 안됨. NaN(not a number)
const age = parseInt(prompt("how old are you?"));
console.log(age);

//2.14
isNaN 은 무언가가 NaN인지 판별하는 방법
const age= parseInt(prompt (“How old are you?”));
console.log(isNaN(age));
숫자입력하면 false
글자입력하면 ture
if(condition){
실행코드=true ---실행
실행코드=false ----다음 else 값 실행
} else{
}
condition은 boolean으로 판별가능해야 한다, (true , false)
if(isNaN(age)){
console.log(“please wirte a number”);
} else{
console.log(“Thank you for writing your age”);
}

true || true === true
false || true === true
true || false === true
false || false === false
true && true === true
false && true === false
true && false === false
false && false === false

//3.0
console에 document를 입력하면, 작성한 HTML을 가져올 수 있어.
document는 브라우저에 존재하는 object
console에 console.dir(document)를 호출해 보면, document.title이 HTML에서 정의한 title이랑 같다.
JS에서 HTML document 객체로 부터 title을 가져올 수 있다.
JS는 HTML에 접근하고 읽을 수 있게 설정되어 있어.
js를 통해 html를 바꿀 수도 있다. document.title = "HO";
모든 것들은 document로부터 시작해. web site를 의미하기 때문.
document.body를 호풀하면 body항목만

entDefault함수를 기본적으로 갖고 있음
console.log(event);
}
loginForm.addEventListener("submit", onLoginSubmit); // submit 이벤트가 발생한다면, onLoginSubmit함수를 실행시킨다는 의미 // JS는 onLoginSubmit함수 호출시 인자를 담아서 호출함. 해당 인자는 event object를 담은 정보들
★ 중요 ★
form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어있다. << 우리가 원하는 것이 아님!
preventDefault() 함수를 추가함으로써 브라우저의 기본 동작을 막을 수 있다!!
이 preventDefault 함수는 EventListener 함수의 '첫 번째 argument' 안에 있는 함수이다. 첫 arument는 지금 막 벌어진 event들에 대한 정보를 갖고 있다.
JS는(기본적으로)argument를 담아서 함수를 호출하는데, 이 argument가 기본 정보들을 제공하고 있다. ex) 누가 submit주체인지, 몇 시에 submit을 했는지 등등 콘솔에 출력해보면 알 수 있음

//4.3
addEventListener 안에 있는 함수는 직접 실행하지 않는다
브라우저가 실행시켜주고
브라우저에서 해당 이벤트에 대한 정보 즉, object를 가지게 된다.
addEventListener의 함수에서 object에 대한 자리만 할당해주면
해당 이벤트가 발생시킨 정보들에 대한 object들을 볼 수 있다!
이때 해당 이벤트가 가진 기본 Default값을 발생시키지 않기 하게 위해선 preventDefault를 이용하여 막을 수 있다!

//4.4
 visibility:hidden은 공간은 그대로 두고 보이지만 않는건데 display:none은 잡아둔 공간도 사라진다
 "Hello" + username === `Hello ${username}`